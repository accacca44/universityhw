Terminals unused in grammar

    COMMA


Grammar

    0 $accept: program $end

    1 program: ε
    2        | program input

    3 input: SEMICOLON
    4      | var_declaration
    5      | var_assignment
    6      | if_statement
    7      | while_statement
    8      | read_value
    9      | write_value
   10      | error SEMICOLON

   11 var_declaration: TYPE_INT IDENTIFIER SEMICOLON
   12                | TYPE_DOUBLE IDENTIFIER SEMICOLON
   13                | TYPE_BOOL IDENTIFIER SEMICOLON
   14                | TYPE_INT IDENTIFIER ASSIGNMENT_OP expression SEMICOLON
   15                | TYPE_DOUBLE IDENTIFIER ASSIGNMENT_OP expression SEMICOLON
   16                | TYPE_BOOL IDENTIFIER ASSIGNMENT_OP expression SEMICOLON

   17 var_assignment: IDENTIFIER ASSIGNMENT_OP expression SEMICOLON

   18 expression: value
   19           | OP_ADD expression
   20           | OP_SUB expression
   21           | expression OP_ADD expression
   22           | expression OP_SUB expression
   23           | expression OP_MUL expression
   24           | expression OP_DIV expression
   25           | expression OP_MOD expression
   26           | OPEN_PAREN expression CLOSE_PAREN

   27 logical_expression: expression
   28                   | relational_expression
   29                   | relational_expression REL_AND relational_expression
   30                   | relational_expression REL_OR relational_expression
   31                   | REL_NOT OPEN_PAREN logical_expression CLOSE_PAREN

   32 relational_expression: expression relation expression

   33 relation: REL_EQ
   34         | REL_NOTEQ
   35         | REL_GT
   36         | REL_LT
   37         | REL_GTE
   38         | REL_LTE

   39 value: INTEGER
   40      | TRUE
   41      | FALSE
   42      | DOUBLE
   43      | IDENTIFIER

   44 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   45             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE
   46             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   47             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

   48 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE

   49 read_value: IO_READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON

   50 write_value: IO_WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256) 10 46 47
    IDENTIFIER <variable_name> (258) 11 12 13 14 15 16 17 43 49
    INTEGER <integer_value> (259) 39
    DOUBLE <double_value> (260) 42
    TRUE (261) 40
    FALSE (262) 41
    TYPE_INT (263) 11 14
    TYPE_DOUBLE (264) 12 15
    TYPE_BOOL (265) 13 16
    ASSIGNMENT_OP (266) 14 15 16 17
    REL_AND (267) 29
    REL_OR (268) 30
    REL_NOT (269) 31
    REL_NOTEQ (270) 34
    REL_EQ (271) 33
    REL_LT (272) 36
    REL_GT (273) 35
    REL_LTE (274) 38
    REL_GTE (275) 37
    KEY_WHILE (276) 48
    KEY_IF (277) 44 45 46 47
    KEY_ELSE (278) 45 47
    OP_SUB (279) 20 22
    OP_ADD (280) 19 21
    OP_MUL (281) 23
    OP_DIV (282) 24
    OP_MOD (283) 25
    IO_READ (284) 49
    IO_WRITE (285) 50
    OPEN_BRACE (286) 44 45 46 47 48
    CLOSE_BRACE (287) 44 45 46 47 48
    OPEN_PAREN (288) 26 31 44 45 46 47 48 49 50
    CLOSE_PAREN (289) 26 31 44 45 46 47 48 49 50
    SEMICOLON (290) 3 10 11 12 13 14 15 16 17 49 50
    COMMA (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1 2
        on right: 0 2 44 45 46 47 48
    input (39)
        on left: 3 4 5 6 7 8 9 10
        on right: 2
    var_declaration (40)
        on left: 11 12 13 14 15 16
        on right: 4
    var_assignment (41)
        on left: 17
        on right: 5
    expression (42)
        on left: 18 19 20 21 22 23 24 25 26
        on right: 14 15 16 17 19 20 21 22 23 24 25 26 27 32 50
    logical_expression (43)
        on left: 27 28 29 30 31
        on right: 31 44 45 48
    relational_expression (44)
        on left: 32
        on right: 28 29 30
    relation (45)
        on left: 33 34 35 36 37 38
        on right: 32
    value (46)
        on left: 39 40 41 42 43
        on right: 18
    if_statement (47)
        on left: 44 45 46 47
        on right: 6
    while_statement (48)
        on left: 48
        on right: 7
    read_value (49)
        on left: 49
        on right: 8
    write_value (50)
        on left: 50
        on right: 9


State 0

    0 $accept: • program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    2 program: program • input

    $end         shift, and go to state 2
    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    KEY_WHILE    shift, and go to state 8
    KEY_IF       shift, and go to state 9
    IO_READ      shift, and go to state 10
    IO_WRITE     shift, and go to state 11
    SEMICOLON    shift, and go to state 12

    input            go to state 13
    var_declaration  go to state 14
    var_assignment   go to state 15
    if_statement     go to state 16
    while_statement  go to state 17
    read_value       go to state 18
    write_value      go to state 19


State 2

    0 $accept: program $end •

    $default  accept


State 3

   10 input: error • SEMICOLON

    SEMICOLON  shift, and go to state 20


State 4

   17 var_assignment: IDENTIFIER • ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 21


State 5

   11 var_declaration: TYPE_INT • IDENTIFIER SEMICOLON
   14                | TYPE_INT • IDENTIFIER ASSIGNMENT_OP expression SEMICOLON

    IDENTIFIER  shift, and go to state 22


State 6

   12 var_declaration: TYPE_DOUBLE • IDENTIFIER SEMICOLON
   15                | TYPE_DOUBLE • IDENTIFIER ASSIGNMENT_OP expression SEMICOLON

    IDENTIFIER  shift, and go to state 23


State 7

   13 var_declaration: TYPE_BOOL • IDENTIFIER SEMICOLON
   16                | TYPE_BOOL • IDENTIFIER ASSIGNMENT_OP expression SEMICOLON

    IDENTIFIER  shift, and go to state 24


State 8

   48 while_statement: KEY_WHILE • OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE

    OPEN_PAREN  shift, and go to state 25


State 9

   44 if_statement: KEY_IF • OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   45             | KEY_IF • OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE
   46             | KEY_IF • OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   47             | KEY_IF • OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    OPEN_PAREN  shift, and go to state 26


State 10

   49 read_value: IO_READ • OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON

    OPEN_PAREN  shift, and go to state 27


State 11

   50 write_value: IO_WRITE • OPEN_PAREN expression CLOSE_PAREN SEMICOLON

    OPEN_PAREN  shift, and go to state 28


State 12

    3 input: SEMICOLON •

    $default  reduce using rule 3 (input)


State 13

    2 program: program input •

    $default  reduce using rule 2 (program)


State 14

    4 input: var_declaration •

    $default  reduce using rule 4 (input)


State 15

    5 input: var_assignment •

    $default  reduce using rule 5 (input)


State 16

    6 input: if_statement •

    $default  reduce using rule 6 (input)


State 17

    7 input: while_statement •

    $default  reduce using rule 7 (input)


State 18

    8 input: read_value •

    $default  reduce using rule 8 (input)


State 19

    9 input: write_value •

    $default  reduce using rule 9 (input)


State 20

   10 input: error SEMICOLON •

    $default  reduce using rule 10 (input)


State 21

   17 var_assignment: IDENTIFIER ASSIGNMENT_OP • expression SEMICOLON

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 37
    value       go to state 38


State 22

   11 var_declaration: TYPE_INT IDENTIFIER • SEMICOLON
   14                | TYPE_INT IDENTIFIER • ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 39
    SEMICOLON      shift, and go to state 40


State 23

   12 var_declaration: TYPE_DOUBLE IDENTIFIER • SEMICOLON
   15                | TYPE_DOUBLE IDENTIFIER • ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 41
    SEMICOLON      shift, and go to state 42


State 24

   13 var_declaration: TYPE_BOOL IDENTIFIER • SEMICOLON
   16                | TYPE_BOOL IDENTIFIER • ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 43
    SEMICOLON      shift, and go to state 44


State 25

   48 while_statement: KEY_WHILE OPEN_PAREN • logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    REL_NOT     shift, and go to state 45
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression             go to state 46
    logical_expression     go to state 47
    relational_expression  go to state 48
    value                  go to state 38


State 26

   44 if_statement: KEY_IF OPEN_PAREN • logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   45             | KEY_IF OPEN_PAREN • logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE
   46             | KEY_IF OPEN_PAREN • error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   47             | KEY_IF OPEN_PAREN • error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    error       shift, and go to state 49
    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    REL_NOT     shift, and go to state 45
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression             go to state 46
    logical_expression     go to state 50
    relational_expression  go to state 48
    value                  go to state 38


State 27

   49 read_value: IO_READ OPEN_PAREN • IDENTIFIER CLOSE_PAREN SEMICOLON

    IDENTIFIER  shift, and go to state 51


State 28

   50 write_value: IO_WRITE OPEN_PAREN • expression CLOSE_PAREN SEMICOLON

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 52
    value       go to state 38


State 29

   43 value: IDENTIFIER •

    $default  reduce using rule 43 (value)


State 30

   39 value: INTEGER •

    $default  reduce using rule 39 (value)


State 31

   42 value: DOUBLE •

    $default  reduce using rule 42 (value)


State 32

   40 value: TRUE •

    $default  reduce using rule 40 (value)


State 33

   41 value: FALSE •

    $default  reduce using rule 41 (value)


State 34

   20 expression: OP_SUB • expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 53
    value       go to state 38


State 35

   19 expression: OP_ADD • expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 54
    value       go to state 38


State 36

   26 expression: OPEN_PAREN • expression CLOSE_PAREN

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 55
    value       go to state 38


State 37

   17 var_assignment: IDENTIFIER ASSIGNMENT_OP expression • SEMICOLON
   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression

    OP_SUB     shift, and go to state 56
    OP_ADD     shift, and go to state 57
    OP_MUL     shift, and go to state 58
    OP_DIV     shift, and go to state 59
    OP_MOD     shift, and go to state 60
    SEMICOLON  shift, and go to state 61


State 38

   18 expression: value •

    $default  reduce using rule 18 (expression)


State 39

   14 var_declaration: TYPE_INT IDENTIFIER ASSIGNMENT_OP • expression SEMICOLON

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 62
    value       go to state 38


State 40

   11 var_declaration: TYPE_INT IDENTIFIER SEMICOLON •

    $default  reduce using rule 11 (var_declaration)


State 41

   15 var_declaration: TYPE_DOUBLE IDENTIFIER ASSIGNMENT_OP • expression SEMICOLON

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 63
    value       go to state 38


State 42

   12 var_declaration: TYPE_DOUBLE IDENTIFIER SEMICOLON •

    $default  reduce using rule 12 (var_declaration)


State 43

   16 var_declaration: TYPE_BOOL IDENTIFIER ASSIGNMENT_OP • expression SEMICOLON

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 64
    value       go to state 38


State 44

   13 var_declaration: TYPE_BOOL IDENTIFIER SEMICOLON •

    $default  reduce using rule 13 (var_declaration)


State 45

   31 logical_expression: REL_NOT • OPEN_PAREN logical_expression CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 65


State 46

   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression
   27 logical_expression: expression •
   32 relational_expression: expression • relation expression

    REL_NOTEQ  shift, and go to state 66
    REL_EQ     shift, and go to state 67
    REL_LT     shift, and go to state 68
    REL_GT     shift, and go to state 69
    REL_LTE    shift, and go to state 70
    REL_GTE    shift, and go to state 71
    OP_SUB     shift, and go to state 56
    OP_ADD     shift, and go to state 57
    OP_MUL     shift, and go to state 58
    OP_DIV     shift, and go to state 59
    OP_MOD     shift, and go to state 60

    $default  reduce using rule 27 (logical_expression)

    relation  go to state 72


State 47

   48 while_statement: KEY_WHILE OPEN_PAREN logical_expression • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE

    CLOSE_PAREN  shift, and go to state 73


State 48

   28 logical_expression: relational_expression •
   29                   | relational_expression • REL_AND relational_expression
   30                   | relational_expression • REL_OR relational_expression

    REL_AND  shift, and go to state 74
    REL_OR   shift, and go to state 75

    $default  reduce using rule 28 (logical_expression)


State 49

   46 if_statement: KEY_IF OPEN_PAREN error • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   47             | KEY_IF OPEN_PAREN error • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    CLOSE_PAREN  shift, and go to state 76


State 50

   44 if_statement: KEY_IF OPEN_PAREN logical_expression • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   45             | KEY_IF OPEN_PAREN logical_expression • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    CLOSE_PAREN  shift, and go to state 77


State 51

   49 read_value: IO_READ OPEN_PAREN IDENTIFIER • CLOSE_PAREN SEMICOLON

    CLOSE_PAREN  shift, and go to state 78


State 52

   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression
   50 write_value: IO_WRITE OPEN_PAREN expression • CLOSE_PAREN SEMICOLON

    OP_SUB       shift, and go to state 56
    OP_ADD       shift, and go to state 57
    OP_MUL       shift, and go to state 58
    OP_DIV       shift, and go to state 59
    OP_MOD       shift, and go to state 60
    CLOSE_PAREN  shift, and go to state 79


State 53

   20 expression: OP_SUB expression •
   21           | expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression

    OP_MUL  shift, and go to state 58
    OP_DIV  shift, and go to state 59

    $default  reduce using rule 20 (expression)


State 54

   19 expression: OP_ADD expression •
   21           | expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression

    OP_MUL  shift, and go to state 58
    OP_DIV  shift, and go to state 59

    $default  reduce using rule 19 (expression)


State 55

   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression
   26           | OPEN_PAREN expression • CLOSE_PAREN

    OP_SUB       shift, and go to state 56
    OP_ADD       shift, and go to state 57
    OP_MUL       shift, and go to state 58
    OP_DIV       shift, and go to state 59
    OP_MOD       shift, and go to state 60
    CLOSE_PAREN  shift, and go to state 80


State 56

   22 expression: expression OP_SUB • expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 81
    value       go to state 38


State 57

   21 expression: expression OP_ADD • expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 82
    value       go to state 38


State 58

   23 expression: expression OP_MUL • expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 83
    value       go to state 38


State 59

   24 expression: expression OP_DIV • expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 84
    value       go to state 38


State 60

   25 expression: expression OP_MOD • expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 85
    value       go to state 38


State 61

   17 var_assignment: IDENTIFIER ASSIGNMENT_OP expression SEMICOLON •

    $default  reduce using rule 17 (var_assignment)


State 62

   14 var_declaration: TYPE_INT IDENTIFIER ASSIGNMENT_OP expression • SEMICOLON
   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression

    OP_SUB     shift, and go to state 56
    OP_ADD     shift, and go to state 57
    OP_MUL     shift, and go to state 58
    OP_DIV     shift, and go to state 59
    OP_MOD     shift, and go to state 60
    SEMICOLON  shift, and go to state 86


State 63

   15 var_declaration: TYPE_DOUBLE IDENTIFIER ASSIGNMENT_OP expression • SEMICOLON
   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression

    OP_SUB     shift, and go to state 56
    OP_ADD     shift, and go to state 57
    OP_MUL     shift, and go to state 58
    OP_DIV     shift, and go to state 59
    OP_MOD     shift, and go to state 60
    SEMICOLON  shift, and go to state 87


State 64

   16 var_declaration: TYPE_BOOL IDENTIFIER ASSIGNMENT_OP expression • SEMICOLON
   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression

    OP_SUB     shift, and go to state 56
    OP_ADD     shift, and go to state 57
    OP_MUL     shift, and go to state 58
    OP_DIV     shift, and go to state 59
    OP_MOD     shift, and go to state 60
    SEMICOLON  shift, and go to state 88


State 65

   31 logical_expression: REL_NOT OPEN_PAREN • logical_expression CLOSE_PAREN

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    REL_NOT     shift, and go to state 45
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression             go to state 46
    logical_expression     go to state 89
    relational_expression  go to state 48
    value                  go to state 38


State 66

   34 relation: REL_NOTEQ •

    $default  reduce using rule 34 (relation)


State 67

   33 relation: REL_EQ •

    $default  reduce using rule 33 (relation)


State 68

   36 relation: REL_LT •

    $default  reduce using rule 36 (relation)


State 69

   35 relation: REL_GT •

    $default  reduce using rule 35 (relation)


State 70

   38 relation: REL_LTE •

    $default  reduce using rule 38 (relation)


State 71

   37 relation: REL_GTE •

    $default  reduce using rule 37 (relation)


State 72

   32 relational_expression: expression relation • expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression  go to state 90
    value       go to state 38


State 73

   48 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 91


State 74

   29 logical_expression: relational_expression REL_AND • relational_expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression             go to state 92
    relational_expression  go to state 93
    value                  go to state 38


State 75

   30 logical_expression: relational_expression REL_OR • relational_expression

    IDENTIFIER  shift, and go to state 29
    INTEGER     shift, and go to state 30
    DOUBLE      shift, and go to state 31
    TRUE        shift, and go to state 32
    FALSE       shift, and go to state 33
    OP_SUB      shift, and go to state 34
    OP_ADD      shift, and go to state 35
    OPEN_PAREN  shift, and go to state 36

    expression             go to state 92
    relational_expression  go to state 94
    value                  go to state 38


State 76

   46 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE
   47             | KEY_IF OPEN_PAREN error CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 95


State 77

   44 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE
   45             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 96


State 78

   49 read_value: IO_READ OPEN_PAREN IDENTIFIER CLOSE_PAREN • SEMICOLON

    SEMICOLON  shift, and go to state 97


State 79

   50 write_value: IO_WRITE OPEN_PAREN expression CLOSE_PAREN • SEMICOLON

    SEMICOLON  shift, and go to state 98


State 80

   26 expression: OPEN_PAREN expression CLOSE_PAREN •

    $default  reduce using rule 26 (expression)


State 81

   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   22           | expression OP_SUB expression •
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression

    OP_MUL  shift, and go to state 58
    OP_DIV  shift, and go to state 59

    $default  reduce using rule 22 (expression)


State 82

   21 expression: expression • OP_ADD expression
   21           | expression OP_ADD expression •
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression

    OP_MUL  shift, and go to state 58
    OP_DIV  shift, and go to state 59

    $default  reduce using rule 21 (expression)


State 83

   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   23           | expression OP_MUL expression •
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression

    $default  reduce using rule 23 (expression)


State 84

   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   24           | expression OP_DIV expression •
   25           | expression • OP_MOD expression

    $default  reduce using rule 24 (expression)


State 85

   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression
   25           | expression OP_MOD expression •

    OP_SUB  shift, and go to state 56
    OP_ADD  shift, and go to state 57
    OP_MUL  shift, and go to state 58
    OP_DIV  shift, and go to state 59

    $default  reduce using rule 25 (expression)


State 86

   14 var_declaration: TYPE_INT IDENTIFIER ASSIGNMENT_OP expression SEMICOLON •

    $default  reduce using rule 14 (var_declaration)


State 87

   15 var_declaration: TYPE_DOUBLE IDENTIFIER ASSIGNMENT_OP expression SEMICOLON •

    $default  reduce using rule 15 (var_declaration)


State 88

   16 var_declaration: TYPE_BOOL IDENTIFIER ASSIGNMENT_OP expression SEMICOLON •

    $default  reduce using rule 16 (var_declaration)


State 89

   31 logical_expression: REL_NOT OPEN_PAREN logical_expression • CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 99


State 90

   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression
   32 relational_expression: expression relation expression •

    OP_SUB  shift, and go to state 56
    OP_ADD  shift, and go to state 57
    OP_MUL  shift, and go to state 58
    OP_DIV  shift, and go to state 59
    OP_MOD  shift, and go to state 60

    $default  reduce using rule 32 (relational_expression)


State 91

   48 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 100


State 92

   21 expression: expression • OP_ADD expression
   22           | expression • OP_SUB expression
   23           | expression • OP_MUL expression
   24           | expression • OP_DIV expression
   25           | expression • OP_MOD expression
   32 relational_expression: expression • relation expression

    REL_NOTEQ  shift, and go to state 66
    REL_EQ     shift, and go to state 67
    REL_LT     shift, and go to state 68
    REL_GT     shift, and go to state 69
    REL_LTE    shift, and go to state 70
    REL_GTE    shift, and go to state 71
    OP_SUB     shift, and go to state 56
    OP_ADD     shift, and go to state 57
    OP_MUL     shift, and go to state 58
    OP_DIV     shift, and go to state 59
    OP_MOD     shift, and go to state 60

    relation  go to state 72


State 93

   29 logical_expression: relational_expression REL_AND relational_expression •

    $default  reduce using rule 29 (logical_expression)


State 94

   30 logical_expression: relational_expression REL_OR relational_expression •

    $default  reduce using rule 30 (logical_expression)


State 95

   46 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE
   47             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 101


State 96

   44 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE
   45             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 102


State 97

   49 read_value: IO_READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON •

    $default  reduce using rule 49 (read_value)


State 98

   50 write_value: IO_WRITE OPEN_PAREN expression CLOSE_PAREN SEMICOLON •

    $default  reduce using rule 50 (write_value)


State 99

   31 logical_expression: REL_NOT OPEN_PAREN logical_expression CLOSE_PAREN •

    $default  reduce using rule 31 (logical_expression)


State 100

    2 program: program • input
   48 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    KEY_WHILE    shift, and go to state 8
    KEY_IF       shift, and go to state 9
    IO_READ      shift, and go to state 10
    IO_WRITE     shift, and go to state 11
    CLOSE_BRACE  shift, and go to state 103
    SEMICOLON    shift, and go to state 12

    input            go to state 13
    var_declaration  go to state 14
    var_assignment   go to state 15
    if_statement     go to state 16
    while_statement  go to state 17
    read_value       go to state 18
    write_value      go to state 19


State 101

    2 program: program • input
   46 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE
   47             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    KEY_WHILE    shift, and go to state 8
    KEY_IF       shift, and go to state 9
    IO_READ      shift, and go to state 10
    IO_WRITE     shift, and go to state 11
    CLOSE_BRACE  shift, and go to state 104
    SEMICOLON    shift, and go to state 12

    input            go to state 13
    var_declaration  go to state 14
    var_assignment   go to state 15
    if_statement     go to state 16
    while_statement  go to state 17
    read_value       go to state 18
    write_value      go to state 19


State 102

    2 program: program • input
   44 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE
   45             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    KEY_WHILE    shift, and go to state 8
    KEY_IF       shift, and go to state 9
    IO_READ      shift, and go to state 10
    IO_WRITE     shift, and go to state 11
    CLOSE_BRACE  shift, and go to state 105
    SEMICOLON    shift, and go to state 12

    input            go to state 13
    var_declaration  go to state 14
    var_assignment   go to state 15
    if_statement     go to state 16
    while_statement  go to state 17
    read_value       go to state 18
    write_value      go to state 19


State 103

   48 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE •

    $default  reduce using rule 48 (while_statement)


State 104

   46 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE •
   47             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE • KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    KEY_ELSE  shift, and go to state 106

    $default  reduce using rule 46 (if_statement)


State 105

   44 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE •
   45             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE • KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    KEY_ELSE  shift, and go to state 107

    $default  reduce using rule 44 (if_statement)


State 106

   47 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE • OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 108


State 107

   45 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE • OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 109


State 108

   47 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE • program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 110


State 109

   45 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE • program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 111


State 110

    2 program: program • input
   47 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program • CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    KEY_WHILE    shift, and go to state 8
    KEY_IF       shift, and go to state 9
    IO_READ      shift, and go to state 10
    IO_WRITE     shift, and go to state 11
    CLOSE_BRACE  shift, and go to state 112
    SEMICOLON    shift, and go to state 12

    input            go to state 13
    var_declaration  go to state 14
    var_assignment   go to state 15
    if_statement     go to state 16
    while_statement  go to state 17
    read_value       go to state 18
    write_value      go to state 19


State 111

    2 program: program • input
   45 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program • CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    TYPE_BOOL    shift, and go to state 7
    KEY_WHILE    shift, and go to state 8
    KEY_IF       shift, and go to state 9
    IO_READ      shift, and go to state 10
    IO_WRITE     shift, and go to state 11
    CLOSE_BRACE  shift, and go to state 113
    SEMICOLON    shift, and go to state 12

    input            go to state 13
    var_declaration  go to state 14
    var_assignment   go to state 15
    if_statement     go to state 16
    while_statement  go to state 17
    read_value       go to state 18
    write_value      go to state 19


State 112

   47 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE •

    $default  reduce using rule 47 (if_statement)


State 113

   45 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE •

    $default  reduce using rule 45 (if_statement)
