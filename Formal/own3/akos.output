Terminals unused in grammar

    COMMA


Grammar

    0 $accept: program $end

    1 program: ε
    2        | program input

    3 input: SEMICOLON
    4      | var_declaration
    5      | var_assignment
    6      | if_statement
    7      | while_statement
    8      | read_value
    9      | write_value
   10      | error SEMICOLON

   11 var_declaration: TYPE_INT IDENTIFIER SEMICOLON
   12                | TYPE_DOUBLE IDENTIFIER SEMICOLON
   13                | TYPE_INT IDENTIFIER ASSIGNMENT_OP expression SEMICOLON
   14                | TYPE_DOUBLE IDENTIFIER ASSIGNMENT_OP expression SEMICOLON

   15 var_assignment: IDENTIFIER ASSIGNMENT_OP expression SEMICOLON

   16 expression: value
   17           | OP_ADD expression
   18           | OP_SUB expression
   19           | expression OP_ADD expression
   20           | expression OP_SUB expression
   21           | expression OP_MUL expression
   22           | expression OP_DIV expression
   23           | expression OP_MOD expression
   24           | OPEN_PAREN expression CLOSE_PAREN

   25 logical_expression: expression
   26                   | relational_expression
   27                   | relational_expression REL_AND relational_expression
   28                   | relational_expression REL_OR relational_expression
   29                   | REL_NOT OPEN_PAREN logical_expression CLOSE_PAREN

   30 relational_expression: expression relation expression

   31 relation: REL_EQ
   32         | REL_NOTEQ
   33         | REL_GT
   34         | REL_LT
   35         | REL_GTE
   36         | REL_LTE

   37 value: INTEGER
   38      | DOUBLE
   39      | IDENTIFIER

   40 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   41             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE
   42             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   43             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

   44 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE

   45 read_value: IO_READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON

   46 write_value: IO_WRITE OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256) 10 42 43
    IDENTIFIER <variable_name> (258) 11 12 13 14 15 39 45 46
    INTEGER <integer_value> (259) 37
    DOUBLE <double_value> (260) 38
    TYPE_INT (261) 11 13
    TYPE_DOUBLE (262) 12 14
    ASSIGNMENT_OP (263) 13 14 15
    REL_AND (264) 27
    REL_OR (265) 28
    REL_NOT (266) 29
    REL_NOTEQ (267) 32
    REL_EQ (268) 31
    REL_LT (269) 34
    REL_GT (270) 33
    REL_LTE (271) 36
    REL_GTE (272) 35
    KEY_WHILE (273) 44
    KEY_IF (274) 40 41 42 43
    KEY_ELSE (275) 41 43
    OP_SUB (276) 18 20
    OP_ADD (277) 17 19
    OP_MUL (278) 21
    OP_DIV (279) 22
    OP_MOD (280) 23
    IO_READ (281) 45
    IO_WRITE (282) 46
    OPEN_BRACE (283) 40 41 42 43 44
    CLOSE_BRACE (284) 40 41 42 43 44
    OPEN_PAREN (285) 24 29 40 41 42 43 44 45 46
    CLOSE_PAREN (286) 24 29 40 41 42 43 44 45 46
    SEMICOLON (287) 3 10 11 12 13 14 15 45 46
    COMMA (288)


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    program (35)
        on left: 1 2
        on right: 0 2 40 41 42 43 44
    input (36)
        on left: 3 4 5 6 7 8 9 10
        on right: 2
    var_declaration (37)
        on left: 11 12 13 14
        on right: 4
    var_assignment (38)
        on left: 15
        on right: 5
    expression (39)
        on left: 16 17 18 19 20 21 22 23 24
        on right: 13 14 15 17 18 19 20 21 22 23 24 25 30
    logical_expression (40)
        on left: 25 26 27 28 29
        on right: 29 40 41 44
    relational_expression (41)
        on left: 30
        on right: 26 27 28
    relation (42)
        on left: 31 32 33 34 35 36
        on right: 30
    value (43)
        on left: 37 38 39
        on right: 16
    if_statement (44)
        on left: 40 41 42 43
        on right: 6
    while_statement (45)
        on left: 44
        on right: 7
    read_value (46)
        on left: 45
        on right: 8
    write_value (47)
        on left: 46
        on right: 9


State 0

    0 $accept: • program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    2 program: program • input

    $end         shift, and go to state 2
    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    KEY_WHILE    shift, and go to state 7
    KEY_IF       shift, and go to state 8
    IO_READ      shift, and go to state 9
    IO_WRITE     shift, and go to state 10
    SEMICOLON    shift, and go to state 11

    input            go to state 12
    var_declaration  go to state 13
    var_assignment   go to state 14
    if_statement     go to state 15
    while_statement  go to state 16
    read_value       go to state 17
    write_value      go to state 18


State 2

    0 $accept: program $end •

    $default  accept


State 3

   10 input: error • SEMICOLON

    SEMICOLON  shift, and go to state 19


State 4

   15 var_assignment: IDENTIFIER • ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 20


State 5

   11 var_declaration: TYPE_INT • IDENTIFIER SEMICOLON
   13                | TYPE_INT • IDENTIFIER ASSIGNMENT_OP expression SEMICOLON

    IDENTIFIER  shift, and go to state 21


State 6

   12 var_declaration: TYPE_DOUBLE • IDENTIFIER SEMICOLON
   14                | TYPE_DOUBLE • IDENTIFIER ASSIGNMENT_OP expression SEMICOLON

    IDENTIFIER  shift, and go to state 22


State 7

   44 while_statement: KEY_WHILE • OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE

    OPEN_PAREN  shift, and go to state 23


State 8

   40 if_statement: KEY_IF • OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   41             | KEY_IF • OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE
   42             | KEY_IF • OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   43             | KEY_IF • OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    OPEN_PAREN  shift, and go to state 24


State 9

   45 read_value: IO_READ • OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON

    OPEN_PAREN  shift, and go to state 25


State 10

   46 write_value: IO_WRITE • OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON

    OPEN_PAREN  shift, and go to state 26


State 11

    3 input: SEMICOLON •

    $default  reduce using rule 3 (input)


State 12

    2 program: program input •

    $default  reduce using rule 2 (program)


State 13

    4 input: var_declaration •

    $default  reduce using rule 4 (input)


State 14

    5 input: var_assignment •

    $default  reduce using rule 5 (input)


State 15

    6 input: if_statement •

    $default  reduce using rule 6 (input)


State 16

    7 input: while_statement •

    $default  reduce using rule 7 (input)


State 17

    8 input: read_value •

    $default  reduce using rule 8 (input)


State 18

    9 input: write_value •

    $default  reduce using rule 9 (input)


State 19

   10 input: error SEMICOLON •

    $default  reduce using rule 10 (input)


State 20

   15 var_assignment: IDENTIFIER ASSIGNMENT_OP • expression SEMICOLON

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 33
    value       go to state 34


State 21

   11 var_declaration: TYPE_INT IDENTIFIER • SEMICOLON
   13                | TYPE_INT IDENTIFIER • ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 35
    SEMICOLON      shift, and go to state 36


State 22

   12 var_declaration: TYPE_DOUBLE IDENTIFIER • SEMICOLON
   14                | TYPE_DOUBLE IDENTIFIER • ASSIGNMENT_OP expression SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 37
    SEMICOLON      shift, and go to state 38


State 23

   44 while_statement: KEY_WHILE OPEN_PAREN • logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    REL_NOT     shift, and go to state 39
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression             go to state 40
    logical_expression     go to state 41
    relational_expression  go to state 42
    value                  go to state 34


State 24

   40 if_statement: KEY_IF OPEN_PAREN • logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   41             | KEY_IF OPEN_PAREN • logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE
   42             | KEY_IF OPEN_PAREN • error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   43             | KEY_IF OPEN_PAREN • error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    error       shift, and go to state 43
    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    REL_NOT     shift, and go to state 39
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression             go to state 40
    logical_expression     go to state 44
    relational_expression  go to state 42
    value                  go to state 34


State 25

   45 read_value: IO_READ OPEN_PAREN • IDENTIFIER CLOSE_PAREN SEMICOLON

    IDENTIFIER  shift, and go to state 45


State 26

   46 write_value: IO_WRITE OPEN_PAREN • IDENTIFIER CLOSE_PAREN SEMICOLON

    IDENTIFIER  shift, and go to state 46


State 27

   39 value: IDENTIFIER •

    $default  reduce using rule 39 (value)


State 28

   37 value: INTEGER •

    $default  reduce using rule 37 (value)


State 29

   38 value: DOUBLE •

    $default  reduce using rule 38 (value)


State 30

   18 expression: OP_SUB • expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 47
    value       go to state 34


State 31

   17 expression: OP_ADD • expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 48
    value       go to state 34


State 32

   24 expression: OPEN_PAREN • expression CLOSE_PAREN

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 49
    value       go to state 34


State 33

   15 var_assignment: IDENTIFIER ASSIGNMENT_OP expression • SEMICOLON
   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression

    OP_SUB     shift, and go to state 50
    OP_ADD     shift, and go to state 51
    OP_MUL     shift, and go to state 52
    OP_DIV     shift, and go to state 53
    OP_MOD     shift, and go to state 54
    SEMICOLON  shift, and go to state 55


State 34

   16 expression: value •

    $default  reduce using rule 16 (expression)


State 35

   13 var_declaration: TYPE_INT IDENTIFIER ASSIGNMENT_OP • expression SEMICOLON

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 56
    value       go to state 34


State 36

   11 var_declaration: TYPE_INT IDENTIFIER SEMICOLON •

    $default  reduce using rule 11 (var_declaration)


State 37

   14 var_declaration: TYPE_DOUBLE IDENTIFIER ASSIGNMENT_OP • expression SEMICOLON

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 57
    value       go to state 34


State 38

   12 var_declaration: TYPE_DOUBLE IDENTIFIER SEMICOLON •

    $default  reduce using rule 12 (var_declaration)


State 39

   29 logical_expression: REL_NOT • OPEN_PAREN logical_expression CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 58


State 40

   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression
   25 logical_expression: expression •
   30 relational_expression: expression • relation expression

    REL_NOTEQ  shift, and go to state 59
    REL_EQ     shift, and go to state 60
    REL_LT     shift, and go to state 61
    REL_GT     shift, and go to state 62
    REL_LTE    shift, and go to state 63
    REL_GTE    shift, and go to state 64
    OP_SUB     shift, and go to state 50
    OP_ADD     shift, and go to state 51
    OP_MUL     shift, and go to state 52
    OP_DIV     shift, and go to state 53
    OP_MOD     shift, and go to state 54

    $default  reduce using rule 25 (logical_expression)

    relation  go to state 65


State 41

   44 while_statement: KEY_WHILE OPEN_PAREN logical_expression • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE

    CLOSE_PAREN  shift, and go to state 66


State 42

   26 logical_expression: relational_expression •
   27                   | relational_expression • REL_AND relational_expression
   28                   | relational_expression • REL_OR relational_expression

    REL_AND  shift, and go to state 67
    REL_OR   shift, and go to state 68

    $default  reduce using rule 26 (logical_expression)


State 43

   42 if_statement: KEY_IF OPEN_PAREN error • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   43             | KEY_IF OPEN_PAREN error • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    CLOSE_PAREN  shift, and go to state 69


State 44

   40 if_statement: KEY_IF OPEN_PAREN logical_expression • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE
   41             | KEY_IF OPEN_PAREN logical_expression • CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    CLOSE_PAREN  shift, and go to state 70


State 45

   45 read_value: IO_READ OPEN_PAREN IDENTIFIER • CLOSE_PAREN SEMICOLON

    CLOSE_PAREN  shift, and go to state 71


State 46

   46 write_value: IO_WRITE OPEN_PAREN IDENTIFIER • CLOSE_PAREN SEMICOLON

    CLOSE_PAREN  shift, and go to state 72


State 47

   18 expression: OP_SUB expression •
   19           | expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression

    OP_MUL  shift, and go to state 52
    OP_DIV  shift, and go to state 53

    $default  reduce using rule 18 (expression)


State 48

   17 expression: OP_ADD expression •
   19           | expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression

    OP_MUL  shift, and go to state 52
    OP_DIV  shift, and go to state 53

    $default  reduce using rule 17 (expression)


State 49

   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression
   24           | OPEN_PAREN expression • CLOSE_PAREN

    OP_SUB       shift, and go to state 50
    OP_ADD       shift, and go to state 51
    OP_MUL       shift, and go to state 52
    OP_DIV       shift, and go to state 53
    OP_MOD       shift, and go to state 54
    CLOSE_PAREN  shift, and go to state 73


State 50

   20 expression: expression OP_SUB • expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 74
    value       go to state 34


State 51

   19 expression: expression OP_ADD • expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 75
    value       go to state 34


State 52

   21 expression: expression OP_MUL • expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 76
    value       go to state 34


State 53

   22 expression: expression OP_DIV • expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 77
    value       go to state 34


State 54

   23 expression: expression OP_MOD • expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 78
    value       go to state 34


State 55

   15 var_assignment: IDENTIFIER ASSIGNMENT_OP expression SEMICOLON •

    $default  reduce using rule 15 (var_assignment)


State 56

   13 var_declaration: TYPE_INT IDENTIFIER ASSIGNMENT_OP expression • SEMICOLON
   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression

    OP_SUB     shift, and go to state 50
    OP_ADD     shift, and go to state 51
    OP_MUL     shift, and go to state 52
    OP_DIV     shift, and go to state 53
    OP_MOD     shift, and go to state 54
    SEMICOLON  shift, and go to state 79


State 57

   14 var_declaration: TYPE_DOUBLE IDENTIFIER ASSIGNMENT_OP expression • SEMICOLON
   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression

    OP_SUB     shift, and go to state 50
    OP_ADD     shift, and go to state 51
    OP_MUL     shift, and go to state 52
    OP_DIV     shift, and go to state 53
    OP_MOD     shift, and go to state 54
    SEMICOLON  shift, and go to state 80


State 58

   29 logical_expression: REL_NOT OPEN_PAREN • logical_expression CLOSE_PAREN

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    REL_NOT     shift, and go to state 39
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression             go to state 40
    logical_expression     go to state 81
    relational_expression  go to state 42
    value                  go to state 34


State 59

   32 relation: REL_NOTEQ •

    $default  reduce using rule 32 (relation)


State 60

   31 relation: REL_EQ •

    $default  reduce using rule 31 (relation)


State 61

   34 relation: REL_LT •

    $default  reduce using rule 34 (relation)


State 62

   33 relation: REL_GT •

    $default  reduce using rule 33 (relation)


State 63

   36 relation: REL_LTE •

    $default  reduce using rule 36 (relation)


State 64

   35 relation: REL_GTE •

    $default  reduce using rule 35 (relation)


State 65

   30 relational_expression: expression relation • expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression  go to state 82
    value       go to state 34


State 66

   44 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 83


State 67

   27 logical_expression: relational_expression REL_AND • relational_expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression             go to state 84
    relational_expression  go to state 85
    value                  go to state 34


State 68

   28 logical_expression: relational_expression REL_OR • relational_expression

    IDENTIFIER  shift, and go to state 27
    INTEGER     shift, and go to state 28
    DOUBLE      shift, and go to state 29
    OP_SUB      shift, and go to state 30
    OP_ADD      shift, and go to state 31
    OPEN_PAREN  shift, and go to state 32

    expression             go to state 84
    relational_expression  go to state 86
    value                  go to state 34


State 69

   42 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE
   43             | KEY_IF OPEN_PAREN error CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 87


State 70

   40 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE
   41             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN • OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 88


State 71

   45 read_value: IO_READ OPEN_PAREN IDENTIFIER CLOSE_PAREN • SEMICOLON

    SEMICOLON  shift, and go to state 89


State 72

   46 write_value: IO_WRITE OPEN_PAREN IDENTIFIER CLOSE_PAREN • SEMICOLON

    SEMICOLON  shift, and go to state 90


State 73

   24 expression: OPEN_PAREN expression CLOSE_PAREN •

    $default  reduce using rule 24 (expression)


State 74

   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   20           | expression OP_SUB expression •
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression

    OP_MUL  shift, and go to state 52
    OP_DIV  shift, and go to state 53

    $default  reduce using rule 20 (expression)


State 75

   19 expression: expression • OP_ADD expression
   19           | expression OP_ADD expression •
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression

    OP_MUL  shift, and go to state 52
    OP_DIV  shift, and go to state 53

    $default  reduce using rule 19 (expression)


State 76

   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   21           | expression OP_MUL expression •
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression

    $default  reduce using rule 21 (expression)


State 77

   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   22           | expression OP_DIV expression •
   23           | expression • OP_MOD expression

    $default  reduce using rule 22 (expression)


State 78

   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression
   23           | expression OP_MOD expression •

    OP_SUB  shift, and go to state 50
    OP_ADD  shift, and go to state 51
    OP_MUL  shift, and go to state 52
    OP_DIV  shift, and go to state 53

    $default  reduce using rule 23 (expression)


State 79

   13 var_declaration: TYPE_INT IDENTIFIER ASSIGNMENT_OP expression SEMICOLON •

    $default  reduce using rule 13 (var_declaration)


State 80

   14 var_declaration: TYPE_DOUBLE IDENTIFIER ASSIGNMENT_OP expression SEMICOLON •

    $default  reduce using rule 14 (var_declaration)


State 81

   29 logical_expression: REL_NOT OPEN_PAREN logical_expression • CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 91


State 82

   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression
   30 relational_expression: expression relation expression •

    OP_SUB  shift, and go to state 50
    OP_ADD  shift, and go to state 51
    OP_MUL  shift, and go to state 52
    OP_DIV  shift, and go to state 53
    OP_MOD  shift, and go to state 54

    $default  reduce using rule 30 (relational_expression)


State 83

   44 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 92


State 84

   19 expression: expression • OP_ADD expression
   20           | expression • OP_SUB expression
   21           | expression • OP_MUL expression
   22           | expression • OP_DIV expression
   23           | expression • OP_MOD expression
   30 relational_expression: expression • relation expression

    REL_NOTEQ  shift, and go to state 59
    REL_EQ     shift, and go to state 60
    REL_LT     shift, and go to state 61
    REL_GT     shift, and go to state 62
    REL_LTE    shift, and go to state 63
    REL_GTE    shift, and go to state 64
    OP_SUB     shift, and go to state 50
    OP_ADD     shift, and go to state 51
    OP_MUL     shift, and go to state 52
    OP_DIV     shift, and go to state 53
    OP_MOD     shift, and go to state 54

    relation  go to state 65


State 85

   27 logical_expression: relational_expression REL_AND relational_expression •

    $default  reduce using rule 27 (logical_expression)


State 86

   28 logical_expression: relational_expression REL_OR relational_expression •

    $default  reduce using rule 28 (logical_expression)


State 87

   42 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE
   43             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 93


State 88

   40 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE
   41             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE • program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 94


State 89

   45 read_value: IO_READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON •

    $default  reduce using rule 45 (read_value)


State 90

   46 write_value: IO_WRITE OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON •

    $default  reduce using rule 46 (write_value)


State 91

   29 logical_expression: REL_NOT OPEN_PAREN logical_expression CLOSE_PAREN •

    $default  reduce using rule 29 (logical_expression)


State 92

    2 program: program • input
   44 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    KEY_WHILE    shift, and go to state 7
    KEY_IF       shift, and go to state 8
    IO_READ      shift, and go to state 9
    IO_WRITE     shift, and go to state 10
    CLOSE_BRACE  shift, and go to state 95
    SEMICOLON    shift, and go to state 11

    input            go to state 12
    var_declaration  go to state 13
    var_assignment   go to state 14
    if_statement     go to state 15
    while_statement  go to state 16
    read_value       go to state 17
    write_value      go to state 18


State 93

    2 program: program • input
   42 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE
   43             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    KEY_WHILE    shift, and go to state 7
    KEY_IF       shift, and go to state 8
    IO_READ      shift, and go to state 9
    IO_WRITE     shift, and go to state 10
    CLOSE_BRACE  shift, and go to state 96
    SEMICOLON    shift, and go to state 11

    input            go to state 12
    var_declaration  go to state 13
    var_assignment   go to state 14
    if_statement     go to state 15
    while_statement  go to state 16
    read_value       go to state 17
    write_value      go to state 18


State 94

    2 program: program • input
   40 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE
   41             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program • CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    KEY_WHILE    shift, and go to state 7
    KEY_IF       shift, and go to state 8
    IO_READ      shift, and go to state 9
    IO_WRITE     shift, and go to state 10
    CLOSE_BRACE  shift, and go to state 97
    SEMICOLON    shift, and go to state 11

    input            go to state 12
    var_declaration  go to state 13
    var_assignment   go to state 14
    if_statement     go to state 15
    while_statement  go to state 16
    read_value       go to state 17
    write_value      go to state 18


State 95

   44 while_statement: KEY_WHILE OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE •

    $default  reduce using rule 44 (while_statement)


State 96

   42 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE •
   43             | KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE • KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    KEY_ELSE  shift, and go to state 98

    $default  reduce using rule 42 (if_statement)


State 97

   40 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE •
   41             | KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE • KEY_ELSE OPEN_BRACE program CLOSE_BRACE

    KEY_ELSE  shift, and go to state 99

    $default  reduce using rule 40 (if_statement)


State 98

   43 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE • OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 100


State 99

   41 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE • OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 101


State 100

   43 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE • program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 102


State 101

   41 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE • program CLOSE_BRACE

    $default  reduce using rule 1 (program)

    program  go to state 103


State 102

    2 program: program • input
   43 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program • CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    KEY_WHILE    shift, and go to state 7
    KEY_IF       shift, and go to state 8
    IO_READ      shift, and go to state 9
    IO_WRITE     shift, and go to state 10
    CLOSE_BRACE  shift, and go to state 104
    SEMICOLON    shift, and go to state 11

    input            go to state 12
    var_declaration  go to state 13
    var_assignment   go to state 14
    if_statement     go to state 15
    while_statement  go to state 16
    read_value       go to state 17
    write_value      go to state 18


State 103

    2 program: program • input
   41 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program • CLOSE_BRACE

    error        shift, and go to state 3
    IDENTIFIER   shift, and go to state 4
    TYPE_INT     shift, and go to state 5
    TYPE_DOUBLE  shift, and go to state 6
    KEY_WHILE    shift, and go to state 7
    KEY_IF       shift, and go to state 8
    IO_READ      shift, and go to state 9
    IO_WRITE     shift, and go to state 10
    CLOSE_BRACE  shift, and go to state 105
    SEMICOLON    shift, and go to state 11

    input            go to state 12
    var_declaration  go to state 13
    var_assignment   go to state 14
    if_statement     go to state 15
    while_statement  go to state 16
    read_value       go to state 17
    write_value      go to state 18


State 104

   43 if_statement: KEY_IF OPEN_PAREN error CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE •

    $default  reduce using rule 43 (if_statement)


State 105

   41 if_statement: KEY_IF OPEN_PAREN logical_expression CLOSE_PAREN OPEN_BRACE program CLOSE_BRACE KEY_ELSE OPEN_BRACE program CLOSE_BRACE •

    $default  reduce using rule 41 (if_statement)
